package pomegranate

const leadingDigits = 5
const forwardFile = "forward.sql"
const backwardFile = "backward.sql"
const timestampFormat = "20060102150405"
const separateFlag = "#SEPERATE#"

const initForwardTmpl = `BEGIN;
CREATE TABLE migration_state (
	name TEXT NOT NULL,
	time TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
	who TEXT DEFAULT CURRENT_USER NOT NULL,
	PRIMARY KEY (name)
);

CREATE TABLE migration_log (
  id SERIAL PRIMARY KEY,
  time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  name TEXT NOT NULL,
  op TEXT NOT NULL,
  who TEXT NOT NULL DEFAULT CURRENT_USER
);

CREATE OR REPLACE FUNCTION record_migration() RETURNS trigger AS $$
BEGIN
	IF TG_OP='DELETE' THEN
		INSERT INTO migration_log (name, op) VALUES (
			OLD.name,
			TG_OP
		);
		RETURN OLD;
	ELSE
		INSERT INTO migration_log (name, op) VALUES (
          NEW.name,
          TG_OP
		);
		RETURN NEW;
	END IF;
END;
$$ language plpgsql;

CREATE TRIGGER record_migration AFTER INSERT OR UPDATE OR DELETE ON migration_state
  FOR EACH ROW EXECUTE PROCEDURE record_migration();

INSERT INTO migration_state(name) VALUES ('%s');
COMMIT;
`

const initBackwardTmpl = `BEGIN;
CREATE OR REPLACE FUNCTION no_rollback() RETURNS void AS $$
BEGIN
  RAISE 'Will not roll back %s.  You must manually drop the migration_state and migration_log tables.';
END;
$$ LANGUAGE plpgsql;

SELECT no_rollback();
COMMIT;
`

const forwardTmpl = `BEGIN;
-- vvvvvvvv PUT FORWARD MIGRATION CODE BELOW HERE vvvvvvvv

SELECT 1 / 0; -- delete this line

-- ^^^^^^^^ PUT FORWARD MIGRATION CODE ABOVE HERE ^^^^^^^^
INSERT INTO migration_state(name) VALUES ('%s');
COMMIT;
`

const backwardTmpl = `BEGIN;
-- vvvvvvvv PUT BACKWARD MIGRATION CODE BELOW HERE vvvvvvvv

SELECT 1 / 0; -- delete this line

-- ^^^^^^^^ PUT BACKWARD MIGRATION CODE ABOVE HERE ^^^^^^^^
DELETE FROM migration_state WHERE name='%s';
COMMIT;
`

const srcTmpl = `// Code generated by pmg. DO NOT EDIT.
package {{.PackageName}} 
{{if .GenerateTag}}// The following comment tags this file for overwriting by "go generate"
//go:generate pmg ingest -package {{.PackageName}} -gofile {{.GoFile}}
// You can run "go generate {{.GoFile}}" to regenerate this file from the .sql migrations{{end}}

import "github.com/btubbs/pomegranate"

var All = []pomegranate.Migration{
{{range .Migrations}}  {
  Name: "{{.Name}}",
  ForwardSQL: {{.QuotedForward}},
  BackwardSQL: {{.QuotedBackward}},
  },{{end}}
}
`

type srcContext struct {
	PackageName string
	Migrations  []Migration
	GenerateTag bool
	GoFile      string
}
